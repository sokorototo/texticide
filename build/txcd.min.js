!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Texticide=t()}(this,function(){"use strict";class r{constructor(e,t=[]){if(!Array.isArray(t))throw new Error("Expected parameter for Diction should be an array!");this.name=String(e),this.patterns=r.parse(t)}static parse(e){let t=e.slice(),r=[];for(let e=0;e<t.length;e++){var a=t[e];r.push(a)}return r}}class e{constructor(e=[],t={}){if(!Array.isArray(e)||"object"!=typeof t)throw new Error("Sanitizer parameters are not of type: fn(Array, Object)");if(this.dictionary=e,this.defaultLevel=t.defaultLevel||4,this.replacer=t.replacer||"*","string"!=typeof this.replacer&&"function"!=typeof this.replacer)throw new Error("{}.replacer must either be a string or a function")}locate(r,t=this.defaultLevel,a=[]){let i=[];for(let e=0;e<this.dictionary.length;e++){var n=this.dictionary[e];for(let e=0;e<n.patterns.length;e++){var o=n.patterns[e];if(!a.includes(o.id)&&!(o.level>=t)){var s=o.patterns;for(let t=0;t<s.length;t++){const f=s[t];let e=!1;for(var c={diction:n.name,pattern:f,word:o.id};!e;){var l=f.exec(r);e=!l,e||i.push(Object.assign({match:[l[0],l.index,l[0].length+l.index]},c))}}}}}return i}clean(o,e,t){let r=this.locate(o,e,t),s=this.replacer;return r.forEach(function(e){let r;switch(typeof s){case"string":let t="";var a=e.match[2]-e.match[1],i=s.split("");for(let e=0;e<a;e++)t+=i[Math.floor(i.length*Math.random())];r=t;break;case"function":r=s(e.match[0])}var t=o.slice(0,e.match[1]),n=o.slice(e.match[2]);o=t+r+n}),o}}return{Sanitizer:e,Diction:r}});
